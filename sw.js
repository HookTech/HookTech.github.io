const CACHE_NAME="philo-site-v1.0.0",STATIC_CACHE="philo-static-v1.0.0",DYNAMIC_CACHE="philo-dynamic-v1.0.0",STATIC_ASSETS=["/","/css/main.css","/css/custom-animations.css","/css/homepage-enhancements.css","/css/performance-optimization.css","/js/boot.js","/js/events.js","/js/plugins.js","/js/custom-interactions.js","/js/homepage-interactions.js","/js/performance-optimization.js","/img/avatar.png","/img/default.png","/img/loading.gif"],DYNAMIC_ASSETS=["/archives/","/categories/","/tags/","/2025/08/04/Cursor-Usage/","/2018/07/09/Golden-Ratio-Fibonacci/"];function isStaticAsset(e){return e.includes("/css/")||e.includes("/js/")||e.includes("/img/")||e.includes("/fonts/")||e.endsWith(".css")||e.endsWith(".js")||e.endsWith(".png")||e.endsWith(".jpg")||e.endsWith(".jpeg")||e.endsWith(".gif")||e.endsWith(".svg")||e.endsWith(".woff")||e.endsWith(".woff2")}function isDynamicAsset(e){return e.includes("/archives/")||e.includes("/categories/")||e.includes("/tags/")||e.includes("/2025/")||e.includes("/2018/")}function preloadCriticalResources(){const e=["/css/performance-optimization.css","/js/performance-optimization.js"];return caches.open(STATIC_CACHE).then(t=>t.addAll(e))}self.addEventListener("install",e=>{console.log("Service Worker: Installing..."),e.waitUntil(caches.open(STATIC_CACHE).then(e=>(console.log("Service Worker: Caching static assets"),e.addAll(STATIC_ASSETS))).then(()=>(console.log("Service Worker: Static assets cached"),self.skipWaiting())).catch(e=>{console.error("Service Worker: Failed to cache static assets",e)}))}),self.addEventListener("activate",e=>{console.log("Service Worker: Activating..."),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==STATIC_CACHE&&e!==DYNAMIC_CACHE)return console.log("Service Worker: Deleting old cache",e),caches.delete(e)}))).then(()=>(console.log("Service Worker: Activated"),self.clients.claim())))}),self.addEventListener("fetch",e=>{const{request:t}=e,s=new URL(t.url);s.origin===location.origin&&("GET"!==t.method||"image"!==t.destination?"GET"===t.method&&e.respondWith(caches.match(t).then(e=>e||fetch(t).then(e=>{if(!e||200!==e.status||"basic"!==e.type)return e;const s=e.clone();return isStaticAsset(t.url)?caches.open(STATIC_CACHE).then(e=>{e.put(t,s)}):isDynamicAsset(t.url)&&caches.open(DYNAMIC_CACHE).then(e=>{e.put(t,s)}),e}).catch(e=>{if(console.error("Service Worker: Fetch failed",e),"document"===t.destination)return caches.match("/");throw e}))):e.respondWith((async()=>{try{const e=t.headers.get("accept")||"",i=/\.(png|jpe?g)$/i.test(s.pathname);if(e.includes("image/webp")&&i){const e=s.pathname.replace(/\.(png|jpe?g)$/i,".webp")+s.search,t=new URL(e,location.origin).toString(),i=new Request(t,{credentials:"same-origin",mode:"same-origin"}),n=await caches.open(STATIC_CACHE),c=await n.match(i);if(c)return c;const a=await fetch(i);if(a&&a.ok)return n.put(i,a.clone()),a}}catch(e){}const e=await caches.open(STATIC_CACHE),i=await e.match(t);if(i)return i;const n=await fetch(t);return n&&n.ok&&e.put(t,n.clone()),n})()))}),self.addEventListener("message",e=>{if(e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CACHE_URLS"===e.data.type){const t=e.data.payload;e.waitUntil(caches.open(DYNAMIC_CACHE).then(e=>e.addAll(t)))}}),self.addEventListener("sync",e=>{"background-sync"===e.tag&&e.waitUntil(preloadCriticalResources())}),console.log("Service Worker: Loaded successfully");