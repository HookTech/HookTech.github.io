<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在 Dokploy 部署 Loki 日志平台（Promtail + MinIO + Nginx 网关）</title>
      <link href="/2025/10/20/deploy-loki-on-dokploy/"/>
      <url>/2025/10/20/deploy-loki-on-dokploy/</url>
      
        <content type="html"><![CDATA[<p>本文基于仓库 HookTech/loki 的近期改动，在 Dokploy 上用 Compose 部署 Loki 集群并接入 Docker 日志。</p><p>变更摘要（8e217b7 → 7d88b97）</p><ul><li>端口梳理：小服务统一改用 9003；MinIO 容器内回到 9000，对外映射 9003；Grafana 暴露 3300。</li><li>日志采集：采用 <code>promtail-docker.yaml</code>，挂载 <code>/var/run/docker.sock</code>，采集所有容器日志并补充 Docker labels。</li><li>网关：使用标准 Nginx 反代统一暴露 <code>/loki/*</code>，读写分流（read/write/back-end）。</li><li>认证：开启 Grafana 登录，关闭匿名访问。</li><li>其他：若干优化与配置整理。</li></ul><p>在 Dokploy 的部署步骤<br>1) 新建 Project 与 Compose 应用：在 Dokploy 面板中新建项目，创建 “Compose App”。<br>2) 粘贴 Compose：使用仓库的 <code>production/docker/docker-compose.yaml</code>（关键端口：Grafana 3300、Gateway 8080、Promtail 9080、MinIO 9003→9000）。<br>3) 卷与挂载：确保挂载以下目录（Dokploy 支持 Host Path）：</p><ul><li><code>.data/minio:/data</code>（MinIO 持久化）</li><li><code>./config:/etc/loki</code> 和 <code>./config:/etc/promtail</code></li><li><code>/var/run/docker.sock:/var/run/docker.sock:ro</code>（Promtail 采集所有容器）<br>4) 环境变量：Grafana 默认 <code>GF_SECURITY_ADMIN_USER=admin</code>、<code>GF_SECURITY_ADMIN_PASSWORD=admin</code>；MinIO <code>MINIO_ROOT_USER=loki</code>、<code>MINIO_ROOT_PASSWORD=supersecret</code>，按需改为强口令。<br>5) 暴露服务：</li><li>Grafana: <code>http://&lt;host&gt;:3300</code></li><li>Loki Gateway: <code>http://&lt;host&gt;:8080</code>（Push: <code>/loki/api/v1/push</code>）</li><li>MinIO Console: <code>http://&lt;host&gt;:9001</code>（S3 API: <code>http://&lt;host&gt;:9003</code> → 容器内 9000）</li></ul><p>Promtail 关键配置（片段）<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">clients:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">http://loki-gateway:80/loki/api/v1/push</span><br><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">docker</span><br>    <span class="hljs-attr">docker_sd_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">unix:///var/run/docker.sock</span><br>        <span class="hljs-attr">refresh_interval:</span> <span class="hljs-string">5s</span><br>    <span class="hljs-attr">pipeline_stages:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">docker:</span> &#123;&#125;<br></code></pre></td></tr></table></figure></p><p>验证与排错</p><ul><li>访问 Grafana <code>http://&lt;host&gt;:3300</code> 使用管理员账户登录（文末变量）。已内置 datasource 指向 <code>loki-gateway</code>。</li><li>在 Explore 中查询：<code>&#123;job=&quot;docker&quot;&#125;</code> 即可看到容器日志。</li><li>若看不到日志，检查 Promtail 容器是否挂载了 Docker socket，或 <code>promtail-docker.yaml</code> 是否生效。</li></ul><p>小结<br>以上 Compose 方案在单机即可跑通 Loki 日志平台，并通过 Dokploy 实现一键上线。生产可将凭据放入 Dokploy Secrets，按需调整副本与资源限额。</p>]]></content>
      
      
      <categories>
          
          <category> Observability </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Loki </tag>
            
            <tag> Dokploy </tag>
            
            <tag> Promtail </tag>
            
            <tag> Grafana </tag>
            
            <tag> MinIO </tag>
            
            <tag> Nginx </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursor-Usage</title>
      <link href="/2025/08/04/Cursor-Usage/"/>
      <url>/2025/08/04/Cursor-Usage/</url>
      
        <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>Cursor作为AI时代的扛把子IDE标杆，已经快到纯正的Agent交互模式了，当然程序猿们必然上手啦，不解释更多</p><h1 id="Cursor的安装"><a href="#Cursor的安装" class="headerlink" title="Cursor的安装"></a>Cursor的安装</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">官网地址：https://<span class="hljs-built_in">cursor</span>.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">cn</span> 直接下载安装就好了，截止到<span class="hljs-number">7</span>月<span class="hljs-number">25</span>日，官方正版的价格包年是<span class="hljs-number">16</span>$/月，包月是<span class="hljs-number">20</span>/月，包月是<span class="hljs-number">20</span>$，考虑到<span class="hljs-built_in">cursor</span>强大的能力，这钱可以掏 本文其实就是用<span class="hljs-built_in">cursor</span>，打开我的hexo项目，直接安装个markdown的编辑插件，然后写下的<br></code></pre></td></tr></table></figure><h1 id="Cursor的使用"><a href="#Cursor的使用" class="headerlink" title="Cursor的使用"></a>Cursor的使用</h1><p>本质上是包装开源的vscode，所以vc那一套配置在cursor上也适用，然后就是强大的AI能力</p><p>别小看下面的聊天框，很能体现cursor强大的地方，可以认为call起了个编程管家，它的交互层级已经远不止停留在Copilot模式，已经接近真正的Agent模式，可以直接用人类语言告诉它你要干啥，只要是IDE有权限的，都可以干！包括作为一名有点开发常识的浏览器插件开发小白，调教它直接上手开发一款简单Chrome插件都行，从生成代码框架，到业务需求，甚至给你解释方案，都可以</p><p><img src="/2025/08/04/Cursor-Usage/Cursor-Usage-1.png" alt="Cursor聊天界面截图 - AI编程助手对话"></p><h1 id="一个作为智能Agent的例子"><a href="#一个作为智能Agent的例子" class="headerlink" title="一个作为智能Agent的例子"></a>一个作为智能Agent的例子</h1><p>假如说遇到这个错误，是hexo发布到github.io静态网页时,点击首页的跳转后，直接404</p><p><img src="/2025/08/04/Cursor-Usage/Cursor-Usage-2.png" alt="错误页面截图 - Hexo部署问题"></p><p>我向cursor求助，截图，然后贴在对话框中直接问它</p><p><img src="/2025/08/04/Cursor-Usage/Cursor-Usage-3.png" alt="向Cursor求助截图 - AI编程助手使用"></p><p>然后它明白就一路让我配合执行命令就好</p><p><img src="/2025/08/04/Cursor-Usage/Cursor-Usage-4.png" alt="执行命令截图 - Cursor AI编程过程"></p><p>我唯一做的事情就是Command+回车，作为Cusor的工具人，直接一路执行。当然，是在我眼皮下执行的，如果中途我有疑问，甚至可以停下来问问它，中断下然后继续</p><p>最后它搞定后还贴心地汇报了它的所作所为</p><p><img src="/2025/08/04/Cursor-Usage/Cursor-Usage-5.png" alt="完成汇报截图 - Cursor AI编程结果"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Cursor作为新一代AI编程工具，不仅继承了VSCode的强大功能，还融入了先进的AI能力，让编程变得更加高效和智能。通过本文的实例，我们可以看到Cursor如何帮助开发者快速解决技术问题，提升开发效率。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
            <tag> Cursor </tag>
            
            <tag> AI编程 </tag>
            
            <tag> 开发工具 </tag>
            
            <tag> 编程效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golden Ratio &amp; Fibonacci</title>
      <link href="/2018/07/09/Golden-Ratio-Fibonacci/"/>
      <url>/2018/07/09/Golden-Ratio-Fibonacci/</url>
      
        <content type="html"><![CDATA[<blockquote><p>生活有点无聊…记点好玩的</p></blockquote><hr><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>初中时代知道了Golden Ration，从数学老师那里第一次知道时，感觉很有趣的样子，于是在纸上推啊推，好奇为啥值是0.618呢？后来用换元法最终搞出，那个开心啊&lt;(￣︶￣)&gt;，感觉数学神奇啊</p><p>高中时代无聊，有次捣腾Fibonacci数列，都说这是神奇的数列。于是自己看看有没有好玩的性质，于是让前面的数字除以后面的数字，1/1;1/2;/2/3;3/5;/5/8…等等，数值怎么不对，8/13;13/21，我去，好像是0.618！再继续，21/34;34/55，我擦，竟然真的是0.618这货，而且越往后越是Golden Ration！！什么情况，难道两者之间有不可描述的关系？(<em>ﾟДﾟ</em>) ，在震惊的同时开始各种推，咳咳，但是以当时的阅历，当然并不知道这里面的水有多深，数学原理是啥…于是不了了之</p><p>于是荒废到了工作时代…Times fly and people start to die…</p><p>终于有一天，出来混的都还上了…不废话，正题了</p><h3 id="Golden-Ration"><a href="#Golden-Ration" class="headerlink" title="Golden Ration"></a>Golden Ration</h3><script type="math/tex; mode=display">\frac{2}{1 + \sqrt{5}}\approx0.618\quad\Leftrightarrow\quad\frac{1 + \sqrt{5}}{2}\approx 1.618</script><p>这两货相比大部分人都知道，传说中的黄金分割嘛，为啥起这名儿，也许是因为漂亮的妹子颜值的黄金比吧╮(￣▽￣)╭。也不知道为什么造物主喜欢这样设计，反正只知道整容的都喜欢按这比例动刀…呵呵，说真格的，反正从有机生物到无机结构，很多存在都内含该比例。<br>得，来两张图吧！<br>还记得曾经的图么<br><img src="/2018/07/09/Golden-Ratio-Fibonacci/Golden-Ratio-Fibonacci-2.png" alt="数学老师我没忘喔 - 黄金分割螺旋图"><br>再来张人体图吧(･ิω･ิ)<br><img src="/2018/07/09/Golden-Ratio-Fibonacci/Golden-Ratio-Fibonacci-3.jpg" alt="妹子们不用看中间 - 人体黄金比例图"></p><p>至于值的证明，用换元法把定义的等式处理下，可以得到二次方程</p><script type="math/tex; mode=display">\varphi = 1 + \frac{1}{\varphi}</script><p>其中一根就是1.618，开心吧，另一根后面会有伏笔<br>好了，正题刚刚开始…</p><h3 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h3><p>先镇个楼<br><img src="/2018/07/09/Golden-Ratio-Fibonacci/Golden-Ratio-Fibonacci-2.png" alt="Fibonacci -- Italian Mathematician - 斐波那契肖像"></p><p>数列长这样的，大家都懂</p><script type="math/tex; mode=display">1,1,2,3,5,8,13,21,34,55,89,144,233,377</script><p>等等，不觉得这货增长很快么，那么有多快呢？如果高中的猜测是对的话，后面相邻两数的比值越来越接近黄金比，那么这可是$O(c^{n})$指数级增长啊，1000的话地球都要爆炸了…</p><p>为啥这么快呢?<br>好了，严肃的要开始了，我也要开始还数学债了，非战斗人员可以跳过推导看思想就行</p><hr><p>Fibonacci数列定义是这样的：</p><script type="math/tex; mode=display">\textit{F}_{k + 2}=\textit{F}_{k + 1} + \textit{F}_{k}\\\left\{\textit{F}_{0}=1\right\}\quad\left\{\textit{F}_{1}=1\right\}</script><p>递推式，怎么搞呢，不是通项式，有办法转化为通项表示吗？这样不就知道后项与前项的关系了吗？</p><blockquote><p><em>注：</em><br><em>1. 后面推导的仅是证明思路中的一种</em><br><em>2. 最好有点线性代数基础</em></p></blockquote><p>既然是两项两项一起出现的，那么就一起来运算吧<br>先来个Naive but useful trick打头：</p><script type="math/tex; mode=display">Set\quad \upsilon_{k}=\begin{pmatrix} \textit{F}_{k + 1}\\\textit{F}_{k}\end{pmatrix}(k\in N) \quad so \quad \upsilon_{0}=\begin{pmatrix} \textit{F}_{1}\\\textit{F}_{0}\end{pmatrix}\\ \\ then \quad \upsilon_{k + 1}=\begin{bmatrix}1 &1 \\1 &0 \end{bmatrix}\upsilon_{k}</script><p>重点出现了，矩阵，要开始玩矩阵了！这时什么”线性无关”、”空间基向量”、”行列式”、”特征向量与特征矩阵”等这些概念需要载入大脑内存了哈，忘了的赶紧谷哥度娘起来(￣.￣)</p><p>再清晰一点</p><script type="math/tex; mode=display">Suppose \quad A= \begin{bmatrix}1 &1 \\1 &0 \end{bmatrix} then\;we\;get \\ \\ \Rightarrow \qquad \upsilon_{k + 1}=A\upsilon_{k}</script><p>这里A有对应的含义么，如果Fibonacci相邻两项<script type="math/tex">\textit{F}_{k + 1}</script>和<script type="math/tex">\textit{F}_{k}</script>看成空间中的向量，那么<script type="math/tex">\upsilon_{k+1}</script>就是<script type="math/tex">\upsilon_{k}</script>在A变换下产生的向量，直观的看，这里是不是有点像简单的递推式了？</p><p>关键就是这里，看清楚喔，变换矩阵A可是n维实对称阵啊，还记得线代上被虐过的定理吧：<strong>n阶实对称阵必存在n个实特征值和n个线性无关的特征向量，而且能被对角化</strong> 。<br>(啊，这啥意思啊？有用么，能当钱花，当饭吃么？额，同学你先坐下冷静下，好像现在AI时代是可以的哈)  (;￢＿￢)   </p><p>回来再说，一般某矩阵如果能分解为特征值与特征向量来表示的话，那么恭喜你，你就能看到这个矩阵的本质了，毕竟起名都叫”特征”了(ﾟ▽ﾟ)/如果你再将某矩阵n个线性无关的特征向量组合起来形成空间的话（姑且称为特征矩阵吧），你就知道：<br><strong>矩阵A在物理上就变成了一种投影关系，表示将某个向量投影到A的特征矩阵代表的空间</strong>。<br>如果理解了这一点，上面的式子就像是从<script type="math/tex">\upsilon_{0}</script>开始，不断地被A向量进行着变换，但是不要慌，我们的推导不用这么抽象。</p><p>A的特征向量和特征值先求起来吧，忘了的直接用python或matlab工具包愉快的求出来吧。这样你会愉悦地发现：<br><strong>特征值刚好就是两个黄金比例二次方程的两个根！</strong></p><p>惊喜不惊喜，意外不意外!</p><p>呵呵，其实没啥意外的，大道归一而且这篇软文就是讲这两者之间不可描述的关系的嘛，有见识，很聪明的同学已经开始在心里翻白眼了…没关系，继续来</p><p>A的两个特征值是：<script type="math/tex">\lambda_{1}=\frac{1 + \sqrt{5}}{2}\approx1.618\quad\lambda_{2}=\frac{1 - \sqrt{5}}{2}\approx-0.618</script></p><blockquote><p>有点要记住啊，这里我们suppose绝对值大的那个特征值是<script type="math/tex">\lambda_{1}</script>，会看到后面有用的。</p></blockquote><p>A的两个特征值<script type="math/tex">\lambda_{1}</script>，<script type="math/tex">\lambda_{2}</script>分别对应特征向量为<script type="math/tex">\chi_{1}=\begin{pmatrix}\lambda_{1}\\1\end{pmatrix}</script>，<script type="math/tex">\chi_{2}=\begin{pmatrix}\lambda_{2}\\1\end{pmatrix}</script></p><p>关键的Suppose来了：<br><strong>由于A的两个特征向量是线性无关的，我们就把这两货作为新2维空间的基，将<script type="math/tex">\upsilon_{0}</script>在这个空间中表示出来</strong></p><script type="math/tex; mode=display">\upsilon_{0}=\begin{pmatrix} \textit{F}_{1}\\\textit{F}_{0}\end{pmatrix}=c_{1}\chi_{1}+c_{2}\chi_{2}=\begin{bmatrix}c_{1}\lambda{1}+c_{2}\lambda{2}\\c_{1}+c_{2}\end{bmatrix}</script><p>如果再矩阵化的话是这样的</p><script type="math/tex; mode=display">Suppose\quad S=\begin{bmatrix}\lambda_{1} &\lambda_{2} \\1 &1 \end{bmatrix} \quad and \quad C=\begin{bmatrix} c_{1}\\c_{2} \end{bmatrix} \\ \\ then \quad\upsilon_{0}=SC</script><p>这里S可以称为特征矩阵吧</p><p>好戏来了!<br>根据之前Fibonacci的递推式<script type="math/tex">\upsilon_{k + 1}=A\upsilon_{k}</script>，我们可知:<script type="math/tex">\upsilon_{k}=A^{k}\upsilon_{0}</script>，而根据提过的对角化的优美性质(￣▽￣)~*，我们知道矩阵A是可以分解为(可以验证的):</p><script type="math/tex; mode=display">A=S \Lambda S^{-1}\quad here \quad \Lambda = \begin{bmatrix}\lambda_{1} & 0\\0 &\lambda_{2} \end{bmatrix}</script><p>其中S就是上面的特征矩阵；又计算得知$A^{k}=S\Lambda^{k}S^{-1}$</p><p>所以…铺垫这么多，终于可以推导了(这里详细一点)</p><script type="math/tex; mode=display">\upsilon_{k}=A^{k}\upsilon_{0}=A^{k}SC=S\Lambda^{k}S^{-1}SC=S\Lambda^{k}C\\=\begin{bmatrix}\lambda_{1} &\lambda_{2} \\1 &1 \end{bmatrix}\begin{bmatrix}\lambda_{1}^{k} & 0\\0 &\lambda_{2}^{k} \end{bmatrix}\begin{bmatrix} c_{1}\\c_{2} \end{bmatrix}=\begin{bmatrix} c_{1}\lambda_{1}^{k+1} + c_{2}\lambda_{2}^{k+1}\\c_{1}\lambda_{1}^{k} + c_{2}\lambda_{2}^{k} \end{bmatrix}=\begin{bmatrix} \textit{F}_{k+1}\\\textit{F}_{k} \end{bmatrix}</script><p>这…这，我们想要的通项公式出来了啊!<br>先求出<script type="math/tex">c_{1}</script>，<script type="math/tex">c_{2}</script>吧</p><script type="math/tex; mode=display">\upsilon_{0}=\begin{pmatrix} \textit{F}_{1}\\\textit{F}_{0}\end{pmatrix}=\begin{bmatrix}c_{1}\lambda{1}+c_{2}\lambda{2}\\c_{1}+c_{2}\end{bmatrix}=\begin{pmatrix}1\\1\end{pmatrix}\Rightarrow c_{1}=\frac{1-\lambda_{2}}{\lambda_{1}-\lambda_{2}}, c_{2}=\frac{\lambda_{1}-1}{\lambda_{1}-\lambda_{2}}</script><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过线性代数的工具，我们成功地将斐波那契数列与黄金分割联系在了一起。这不仅展示了数学的美妙，也说明了不同数学分支之间的深刻联系。黄金分割作为自然界中的普遍规律，在斐波那契数列中得到了完美的体现。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 黄金分割 </tag>
            
            <tag> 斐波那契数列 </tag>
            
            <tag> 数学证明 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
